services:
  # Kafka and Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost

  # MinIO (S3-compatible storage)
  minio:
    image: minio/minio:latest
    hostname: minio
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data

  # PostgreSQL Database
  postgres:
    image: postgres:15
    hostname: postgres
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: financial_data
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql

  # Apache Airflow
  airflow-webserver:
    image: apache/airflow:2.7.0
    hostname: airflow-webserver
    container_name: airflow-webserver
    depends_on:
      - postgres
    ports:
      - "8080:8080"
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://postgres:password@postgres:5432/financial_data
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth'
      AIRFLOW__WEBSERVER__EXPOSE_CONFIG: 'true'
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: admin
      _AIRFLOW_WWW_USER_PASSWORD: admin
    volumes:
      - ./orchestration:/opt/airflow/dags
      - ./data_pipeline:/opt/airflow/dags/data_pipeline
      - ./streaming_pipeline:/opt/airflow/dags/streaming_pipeline
      - ./data_lake:/opt/airflow/dags/data_lake
      - ./dbt_models:/opt/airflow/dags/dbt_models
      - airflow_logs:/opt/airflow/logs
    command: webserver

  airflow-scheduler:
    image: apache/airflow:2.7.0
    hostname: airflow-scheduler
    container_name: airflow-scheduler
    depends_on:
      - postgres
      - airflow-webserver
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://postgres:password@postgres:5432/financial_data
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth'
      _AIRFLOW_DB_UPGRADE: 'true'
    volumes:
      - ./orchestration:/opt/airflow/dags
      - ./data_pipeline:/opt/airflow/dags/data_pipeline
      - ./streaming_pipeline:/opt/airflow/dags/streaming_pipeline
      - ./data_lake:/opt/airflow/dags/data_lake
      - ./dbt_models:/opt/airflow/dags/dbt_models
      - airflow_logs:/opt/airflow/logs
    command: scheduler

  # Apache Spark (for PySpark streaming) - Using official image
  spark-master:
    image: apache/spark-py:3.4.1
    hostname: spark-master
    container_name: spark-master
    ports:
      - "8081:8080"
      - "7077:7077"
    environment:
      - SPARK_MODE=master
    volumes:
      - ./streaming_pipeline:/opt/spark/apps
    command: >
      bash -c "
        /opt/spark/bin/spark-class org.apache.spark.deploy.master.Master
        --host spark-master
        --port 7077
        --webui-port 8080
      "

  spark-worker:
    image: apache/spark-py:3.4.1
    hostname: spark-worker
    container_name: spark-worker
    depends_on:
      - spark-master
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
    volumes:
      - ./streaming_pipeline:/opt/spark/apps
    command: >
      bash -c "
        /opt/spark/bin/spark-class org.apache.spark.deploy.worker.Worker
        --webui-port 8080
        spark://spark-master:7077
      "

  # Streamlit Dashboard
  dashboard:
    image: python:3.9-slim
    hostname: dashboard
    container_name: dashboard
    ports:
      - "8501:8501"
    environment:
      - PYTHONPATH=/app
    volumes:
      - ./visualization:/app
      - ./data_pipeline:/app/data_pipeline
    working_dir: /app
    command: >
      bash -c "
        pip install streamlit plotly pandas numpy &&
        streamlit run dashboard.py --server.port=8501 --server.address=0.0.0.0
      "

  # Jupyter Notebook (for data analysis)
  jupyter:
    image: jupyter/pyspark-notebook:latest
    hostname: jupyter
    container_name: jupyter
    ports:
      - "8888:8888"
    environment:
      - JUPYTER_ENABLE_LAB=yes
    volumes:
      - ./notebooks:/home/jovyan/work
      - ./data_pipeline:/home/jovyan/work/data_pipeline
      - ./streaming_pipeline:/home/jovyan/work/streaming_pipeline
      - ./data_lake:/home/jovyan/work/data_lake
    command: >
      bash -c "
        pip install kafka-python boto3 pyarrow &&
        start-notebook.sh --NotebookApp.token='' --NotebookApp.password=''
      "

  # Redis (for caching and session management)
  redis:
    image: redis:7-alpine
    hostname: redis
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  # Grafana (for monitoring)
  grafana:
    image: grafana/grafana:latest
    hostname: grafana
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources

  # Prometheus (for metrics collection)
  prometheus:
    image: prom/prometheus:latest
    hostname: prometheus
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

volumes:
  minio_data:
  postgres_data:
  airflow_logs:
  redis_data:
  grafana_data:
  prometheus_data:

networks:
  default:
    name: financial-data-network
